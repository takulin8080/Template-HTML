/* ============================================================================================== */
/* foundation/mixin/respondTo
/* ============================================================================================== */
/*
---
name: Respond To
category: 1.foundation/mixin
tag:
- responsive
- mixin
---
レスポンシブ対応。`foundation $breakpoint`で値を設定。上書きされるため記載の順序に注意する。

```scss
@include respondTo(smAndUnder) { smallサイズ以下のみ適用};
@include respondTo(smAndOver) { smallサイズ以上のみ適用};
@include respondTo(mdAndUnder) { mediulサイズ以下のみ適用};
@include respondTo(mdAndOver) { mediulサイズ以上のみ適用};
@include respondTo(xs) { xsmallサイズ(small未満)のみ適用};
@include respondTo(sm) { smallサイズのみ適用};
@include respondTo(md) { mediumサイズのみ適用};
@include respondTo(lg) { largeサイズのみ適用};
```
*/
/*
---
name: breakpoint prefix
category: 0-1.HTML
tag: responsive
---

responsive対応の`component data-**`および`utility data-**`に`breakpoint prefix`を付けることで画面サイズによる処理の振り分けが可能。

- `smAndOver-`:`breakpointSmall`以上の画面サイズに適用。
- `smAndUnder-`:`breakpointSmall`未満の画面サイズに適用。
- `mdAndUnder-`:`breakpointMedium`未満の画面サイズに適用。
- `mdAndOver-`:`breakpointMedium`以上の画面サイズに適用。
- `xs-`:`breakpointXSmall`の画面サイズのみ適用。
- `sm-`:`breakpointSmall`の画面サイズのみ適用。
- `md-`:`breakpointMedium`の画面サイズのみ適用。
- `lg-`:`breakpointLarge`以上の画面サイズのみ適用。
*/
/* -------------------------------------------- */
/* mixin
/* -------------------------------------------- */
@mixin respondTo($key) {
	$breakpointSmall: map-get($breakpoint, small);
	$breakpointMedium: map-get($breakpoint, medium);
	$breakpointLarge: map-get($breakpoint, large);
	$breakpointXSmallMax: ($breakpointSmall);
	$breakpointSmallMax: ($breakpointMedium);
	$breakpointMediumMax: ($breakpointLarge);
	/* -------------------------------------------- */
	/* setup
	/* -------------------------------------------- */
	/* ------------------- */
	/* only
	/* ------------------- */
	@if $key == xs {
		@media (max-width: $breakpointXSmallMax) {
			@content;
		}
	} @else if $key == sm {
		@media (min-width: $breakpointSmall) and (max-width: $breakpointSmallMax) {
			@content;
		}
	} @else if $key == md {
		@media (min-width: $breakpointMedium) and (max-width: $breakpointMediumMax) {
			@content;
		}
	} @else if $key == lg {
		@media (min-width: $breakpointLarge) {
			@content;
		}
	}
	/* ------------------- */
	/* over
	/* ------------------- */
@else
	if $key == smAndOver {
		@media (min-width: $breakpointSmall) {
			@content;
		}
	} @else if $key == mdAndOver {
		@media (min-width: $breakpointMedium) {
			@content;
		}
	}
	/* ------------------- */
	/* under
	/* ------------------- */
@else
	if $key == smAndUnder {
		@media (max-width: $breakpointSmallMax) {
			@content;
		}
	} @else if $key == mdAndUnder {
		@media (max-width: $breakpointMediumMax) {
			@content;
		}
	}
}
/* -------------------------------------------- */
/* respondToKeyArray
/* -------------------------------------------- */
$respondToKey: (
	smAndOver,
	mdAndOver,
	smAndUnder,
	mdAndUnder,
	xs,
	sm,
	md,
	lg
);

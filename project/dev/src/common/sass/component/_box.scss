/* ============================================================================================== */
/* component/box
/* ============================================================================================== */
/*
---
name: Box
category: 2.component
tag:
- responsive
- data属性
---
`data-box`が内包する直下のコンテンツ（以下 アイテム）をグループ化、値を設定することでアイテムのレイアウトを設定することが可能。またアイテムに`data-box-item`を付与し値を設定することで、固有のスタイルを付与`data-box`の設定を上書きすることが可能。

### data-box
- 値なし : アイテムが内包するコンテンツに合わせて可変。display-inlineのようなスタイル。
- `full` : アイテムを横幅100%で表示。
- `auto` : アイテムのサイズを均等に分割。
- `inline` : `値なし`と同じく、アイテムが内包するコンテンツに合わせて可変。
- `$num/$num` : `data-box`に対する比率でアイテムの横幅を設定。分子/分母。
- `gutter-$num-$num` : アイテムに余白を付与`gutter-$num`とした場合左右下に`function size`に基づいたサイズを余白が付与する。`gutter-$num-$num`とした場合、2個目の`$num`は`bottom`のサイズとなる。
- `left` : アイテムを左揃えにする。
- `right` : アイテムを右揃えにする。
- `center` : アイテムを中央揃えにする。

```html
<div data-box="full md-1/4 mdAndOver-gutter-1-2 md-center lg-1/8">
	<div>
		<div style="background: #c99">contents</div>
	</div>
	<div>
		<div style="background: #cc9">contents</div>
	</div>
	<div>
		<div style="background: #c9c">contents</div>
	</div>
	<div>
		<div style="background: #9cc">contents</div>
	</div>
	<div>
		<div style="background: #9c9">contents</div>
	</div>
	<div>
		<div style="background: #99c">contents</div>
	</div>
</div>
```

### data-box-item
`data-box`の設定よりも優先度が高いため、アイテムに固有のスタイルを適用可能。

- `full` : 横幅100%で表示。
- `auto` : 同じ行にある残りスペースにサイズを合わせる。`auto`が複数ある場合は均等に配分。
- `inline` : 内包するコンテンツに合わせて可変。display-inlineのようなスタイル。
- `$num/$num` : `data-box`に対する比率でアイテムの横幅を設定。分子/分母。

以下の設定は同行の別アイテムに影響を受け易いのため、使用位置に注意する。

- `left` : アイテムを左揃えにする。
- `right` : アイテムを右揃えにする。
- `center` : アイテムを中央揃えにする。

```html
<div data-box="full 1/2 gutter-2">
	<div data-box-item="full">
		<div style="background: #c99">contents</div>
	</div>
	<div data-box-item="inline">
		<div style="background: #cc9">contents</div>
	</div>
	<div data-box-item="auto">
		<div style="background: #c9c">contents</div>
	</div>
	<div data-box-item>
		<div style="background: #9cc">contents</div>
	</div>
	<div data-box-item>
		<div style="background: #9c9">contents</div>
	</div>
	<div data-box-item="1/4 right">
		<div style="background: #99c">contents</div>
	</div>
</div>
```
*/
[data-box] {
	/* -------------------------------------------- */
	/* variable
	/* -------------------------------------------- */
	$box: ( denom: 12, gutterMaxnum: 8 );
	/* -------------------------------------------- */
	/* setup
	/* -------------------------------------------- */
	display: flex;
	flex-wrap: wrap;
	max-width: $siteWidth;
	& > * {
		flex: 1;
	}
	/* ------------------- */
	/* item base size
	/* ------------------- */
	&[data-box~='auto'] {
		& > * {
			flex: 1;
			width: auto;
		}
	}
	&[data-box~='full'] {
		& > * {
			flex: auto;
			width: 100%;
		}
	}
	&[data-box~='inline'] {
		& > * {
			flex: 0;
			width: auto;
		}
	}
	@for $i from 1 through map-get($box, denom) {
		 @for $c from 1 through map-get($box, denom){
			@if $c <= $i {
				&[data-box~='#{$c}/#{$i}'] {
					& > * {
						flex: 0 0 auto;
						width: 100% / ($i / $c);
					}
				}
			}
		}
	}
	@if $responsive {
		 @each $key in $respondToKey{
			@include respondTo($key) {
				 @for $i from 1 through map-get($box, denom){
					@for $c from 1 through map-get($box, denom) {
						 @if $c <= $i{
							&[data-box~='#{$key}-auto'] {
								& > * {
									flex: 1;
									width: auto;
								}
							}
							&[data-box~='#{$key}-full'] {
								& > * {
									flex: auto;
									width: 100%;
								}
							}
							&[data-box~='#{$key}-inline'] {
								& > * {
									flex: 0;
									width: auto;
								}
							}
							&[data-box~='#{$key}-#{$c}/#{$i}'] {
								& > * {
									flex: 0 0 auto;
									width: 100% / ($i / $c);
								}
							}
						}
					}
				}
			}
		}
	}
	/* ------------------- */
	/* gutter
	/* ------------------- */
	@for $size from 1 through map-get($box, gutterMaxnum) {
		&[data-box~='gutter-#{$size}'] {
			margin-left: size(-$size / 2);
			margin-right: size(-$size / 2);
			& > * {
				padding-bottom: size($size);
				padding-left: size($size / 2);
				padding-right: size($size / 2);
			}
		}
		&[data-box~='gutter-none'] {
			margin: 0;
			& > * {
				padding-bottom: 0;
				padding-left: 0;
				padding-right: 0;
			}
		}
	}
	@for $size from 1 through map-get($box, gutterMaxnum) {
		 @for $bottomSize from 1 through map-get($box, gutterMaxnum){
			&[data-box~='gutter-#{$size}-#{$bottomSize}'] {
				margin-left: size(-$size / 2);
				margin-right: size(-$size / 2);
				& > * {
					padding-bottom: size($bottomSize);
					padding-left: size($size / 2);
					padding-right: size($size / 2);
				}
			}
			&[data-box~='gutter-#{$size}-none'] {
				margin-left: size(-$size / 2);
				margin-right: size(-$size / 2);
				& > * {
					padding-bottom: 0;
					padding-left: size($size / 2);
					padding-right: size($size / 2);
				}
			}
			&[data-box~='gutter-none-#{$bottomSize}'] {
				margin: 0;
				& > * {
					padding-bottom: size($bottomSize);
					padding-left: 0;
					padding-right: 0;
				}
			}
		}
	}
	@if $responsive {
		 @each $key in $respondToKey{
			@include respondTo($key) {
				 @for $size from 1 through map-get($box, gutterMaxnum){
					&[data-box~='#{$key}-gutter-#{$size}'] {
						margin-left: size(-$size / 2);
						margin-right: size(-$size / 2);
						& > * {
							padding-bottom: size($size);
							padding-left: size($size / 2);
							padding-right: size($size / 2);
						}
					}
				}
				@for $size from 1 through map-get($box, gutterMaxnum) {
					 @for $bottomSize from 1 through map-get($box, gutterMaxnum){
						&[data-box~='#{$key}-gutter-#{$size}-#{$bottomSize}'] {
							margin-left: size(-$size / 2);
							margin-right: size(-$size / 2);
							& > * {
								padding-bottom: size($size);
								padding-left: size($size / 2);
								padding-right: size($size / 2);
							}
						}
						&[data-box~='#{$key}-gutter-#{$size}-none'] {
							margin-left: size(-$size / 2);
							margin-right: size(-$size / 2);
							& > * {
								padding-bottom: 0;
								padding-left: size($size / 2);
								padding-right: size($size / 2);
							}
						}
					}
				}
			}
		}
	}
	/* ------------------- */
	/* justify-content
	/* ------------------- */
	&[data-box~='left'] {
		justify-content: flex-start;
	}
	&[data-box~='center'] {
		justify-content: center;
	}
	&[data-box~='right'] {
		justify-content: flex-end;
	}
	@if $responsive {
		 @each $key in $respondToKey{
			@include respondTo($key) {
				&[data-box~='#{$key}-left'] {
					justify-content: flex-start;
				}
				&[data-box~='#{$key}-center'] {
					justify-content: center;
				}
				&[data-box~='#{$key}-right'] {
					@include respondTo($key) {
						justify-content: flex-end;
					}
				}
			}
		}
	}
	/* ------------------- */
	/* item
	/* ------------------- */
	& > [data-box-item~='auto'] {
		flex: 1;
		width: auto;
	}
	& > [data-box-item~='full'] {
		flex: auto;
		width: 100%;
	}
	& > [data-box-item~='inline'] {
		flex: 0;
		width: auto;
	}
	& > [data-box-item~='left'] {
		margin-right: auto;
	}
	& > [data-box-item~='right'] {
		margin-left: auto;
	}
	& > [data-box-item~='center'] {
		margin-right: auto;
		margin-left: auto;
	}
	@for $i from 1 through map-get($box, denom) {
		 @for $c from 1 through map-get($box, denom){
			& > [data-box-item~='#{$c}/#{$i}'] {
				flex: 0 0 auto;
				width: 100% / ($i / $c);
			}
		}
	}
	@if $responsive {
		 @each $key in $respondToKey{
			@include respondTo($key) {
				& > [data-box-item~='#{$key}-auto'] {
					flex: 1;
					width: auto;
				}
				& > [data-box-item~='#{$key}-full'] {
					flex: auto;
					width: 100%;
				}
				& > [data-box-item~='#{$key}-inline'] {
					flex: 0;
					width: auto;
				}
				& > [data-box-item~='#{$key}-left'] {
					margin: 0 auto 0 0;
				}
				& > [data-box-item~='#{$key}-right'] {
					margin: 0 0 0 auto;
				}
				& > [data-box-item~='#{$key}-center'] {
					margin: 0 auto;
				}
				@for $i from 1 through map-get($box, denom) {
					 @for $c from 1 through map-get($box, denom){
						& > [data-box-item~='#{$key}-#{$c}/#{$i}'] {
							flex: 0 0 auto;
							width: 100% / ($i / $c);
						}
					}
				}
			}
		}
	}
}
